{
  "metadata": {
    "created": "2025-07-12T00:00:00.000Z",
    "updated": "2025-07-12T00:00:00.000Z",
    "version": "1.0.0",
    "featureName": "missing-types-implementation"
  },
  "technologyStack": {
    "language": "scala",
    "framework": "mill build system with Scala 3.6.2",
    "dependencies": [
      "upickle:4.1.0 (JSON handling)",
      "utest:0.8.5 (testing framework)",
      "scalatest:3.2.19 (additional testing)",
      "scalamock:7.1.0 (mocking)"
    ],
    "database": "Not applicable - compile-time schema generation",
    "infrastructure": "Mill build system, no runtime infrastructure required"
  },
  "dataModels": [
    {
      "name": "CollectionSchemas",
      "schema": "given instances for Map[K,V], Set[T], Vector[T]",
      "validationRules": "Map keys must be representable in JSON Schema, Set enforces uniqueItems=true",
      "relationships": ["Existing Schema[T] derivation system"]
    },
    {
      "name": "EnumSchema", 
      "schema": "Scala 3 enum cases as string enum values",
      "validationRules": "Enum values must be compile-time constants",
      "relationships": ["Mirror.SumOf[T] derivation"]
    },
    {
      "name": "SealedTraitSchema",
      "schema": "Discriminated union with OneOf composition",
      "validationRules": "Each case class gets type discriminator field",
      "relationships": ["OneOfChez composition", "Mirror.SumOf[T]"]
    },
    {
      "name": "DefaultValueHandling",
      "schema": "Fields with default values not marked as required",
      "validationRules": "Must detect @Schema.default and Scala case class defaults",
      "relationships": ["AnnotationProcessor", "Mirror.ProductOf[T]"]
    }
  ],
  "architecture": {
    "components": [
      {
        "name": "CollectionSchemas",
        "purpose": "Provide given Schema instances for Map, Set, Vector",
        "location": "chez/derivation/CollectionSchemas.scala"
      },
      {
        "name": "EnumDerivation", 
        "purpose": "Fix Scala 3 enum schema derivation in Mirror.SumOf",
        "location": "chez/derivation/SchemaDerivation.scala (enhance deriveSumWithAnnotations)"
      },
      {
        "name": "DefaultValueDetection",
        "purpose": "Detect default values and fix required field logic",
        "location": "chez/derivation/SchemaDerivation.scala (enhance getRequiredFields)"
      },
      {
        "name": "UnionTypeSchemas",
        "purpose": "Support Either[A,B] and other union patterns",
        "location": "chez/derivation/UnionTypeSchemas.scala"
      }
    ],
    "apiEndpoints": [
      "No HTTP endpoints - compile-time library only"
    ],
    "integrationPoints": [
      "Mirror.ProductOf[T] - case class derivation",
      "Mirror.SumOf[T] - enum/sealed trait derivation", 
      "AnnotationProcessor - metadata extraction",
      "ObjectChez - object schema generation",
      "ArrayChez - array schema generation",
      "OneOfChez - discriminated union generation"
    ],
    "fileOrganization": [
      "chez/derivation/SchemaDerivation.scala - enhance existing derivation",
      "chez/derivation/CollectionSchemas.scala - new collection support",
      "chez/derivation/UnionTypeSchemas.scala - new union type support",
      "chez/test/derivation/CollectionDerivationTests.scala - new tests",
      "chez/test/derivation/EnumDerivationTests.scala - new tests",
      "chez/test/derivation/DefaultValueTests.scala - enhance existing tests"
    ]
  },
  "implementationPhases": [
    {
      "phase": "Phase 1: Foundation Fixes",
      "priority": "Critical",
      "components": [
        {
          "name": "Fix Default Value Handling",
          "approach": "Enhance getRequiredFields to check for @Schema.default annotations and Scala default parameters",
          "implementation": "Add defaultValueDetection function using reflection to check Mirror.ProductOf parameter defaults",
          "files": ["chez/derivation/SchemaDerivation.scala"],
          "testStrategy": "Extend DefaultAnnotationTests with mixed required/optional/default field scenarios"
        },
        {
          "name": "Fix Examples Serialization", 
          "approach": "Update ArrayChez toJsonSchema to properly handle ujson.Value arrays",
          "implementation": "Fix examples field serialization in complex types",
          "files": ["chez/complex/ArrayChez.scala", "chez/complex/ObjectChez.scala"],
          "testStrategy": "Add examples serialization tests to ArrayChezTests"
        }
      ]
    },
    {
      "phase": "Phase 2: Collection Types",
      "priority": "High", 
      "components": [
        {
          "name": "Map[K,V] Support",
          "approach": "Create given instance mapping to ObjectChez with additionalProperties or patternProperties",
          "implementation": "Map[String, V] -> ObjectChez(additionalProperties = Some(V.schema)), Map[K, V] -> ObjectChez(patternProperties = Map('.*' -> V.schema))",
          "files": ["chez/derivation/CollectionSchemas.scala"],
          "testStrategy": "Test Map[String, Int], Map[Int, String], nested Map scenarios"
        },
        {
          "name": "Set[T] Support",
          "approach": "Create given instance mapping to ArrayChez with uniqueItems = true",
          "implementation": "Set[T] -> ArrayChez(T.schema, uniqueItems = Some(true))",
          "files": ["chez/derivation/CollectionSchemas.scala"],
          "testStrategy": "Test Set[String], Set[Int], nested Set scenarios"
        },
        {
          "name": "Vector[T] Support",
          "approach": "Create given instance mapping to ArrayChez (same as List)",
          "implementation": "Vector[T] -> ArrayChez(T.schema)",
          "files": ["chez/derivation/CollectionSchemas.scala"], 
          "testStrategy": "Test Vector[String], Vector[Int], nested Vector scenarios"
        }
      ]
    },
    {
      "phase": "Phase 3: Enum and Sealed Trait Support",
      "priority": "High",
      "components": [
        {
          "name": "Scala 3 Enum Derivation",
          "approach": "Fix deriveSumWithAnnotations to properly handle enum types using Mirror.SumOf",
          "implementation": "Extract enum case names at compile-time and generate StringChez with enumValues",
          "files": ["chez/derivation/SchemaDerivation.scala"],
          "testStrategy": "Test simple enums, enums with values, nested enum usage"
        },
        {
          "name": "Sealed Trait Discriminated Unions",
          "approach": "Generate OneOfChez with discriminator for sealed trait hierarchies",
          "implementation": "Each case class gets 'type' field with const value, combined in OneOf",
          "files": ["chez/derivation/SchemaDerivation.scala"],
          "testStrategy": "Test sealed trait with case classes, nested sealed traits"
        }
      ]
    },
    {
      "phase": "Phase 4: Union Types",
      "priority": "Medium",
      "components": [
        {
          "name": "Either[A,B] Support",
          "approach": "Create given instance mapping to AnyOfChez composition",
          "implementation": "Either[A, B] -> AnyOfChez(List(A.schema, B.schema))",
          "files": ["chez/derivation/UnionTypeSchemas.scala"],
          "testStrategy": "Test Either[String, Int], Either[CustomType, Error], nested Either"
        }
      ]
    }
  ],
  "security": {
    "authentication": "Not applicable - compile-time library",
    "authorization": "Not applicable - compile-time library", 
    "validation": "All schemas must be validated at compile-time, no runtime reflection",
    "errorHandling": "Compilation errors for unsupported types, clear error messages for derivation failures"
  },
  "qualityRequirements": {
    "performance": "Schema derivation must complete in under 5 seconds for complex types",
    "compatibility": "Zero breaking changes to existing Schema[T] API",
    "testing": "100% test pass rate (157/157 tests), comprehensive coverage for new types",
    "compilation": "No runtime reflection, pure compile-time derivation only"
  },
  "riskMitigation": {
    "technicalRisks": [
      {
        "risk": "Scala 3 Mirror limitations for advanced enum patterns",
        "mitigation": "Document limitations, provide manual derivation escape hatch"
      },
      {
        "risk": "Compilation performance degradation",
        "mitigation": "Optimize derivation code, add compilation benchmarks"
      },
      {
        "risk": "JSON Schema size explosion for complex ADTs", 
        "mitigation": "Add schema size warnings, provide reference-based alternatives"
      }
    ],
    "backwardCompatibility": [
      "All existing tests must continue to pass",
      "Existing annotation APIs unchanged", 
      "Migration guide for any behavior changes"
    ]
  }
}